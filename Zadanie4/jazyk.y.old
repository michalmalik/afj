%{
	#include <cstdio>
	#include <iostream>

	// Declare stuff from Flex that Bison needs to know about:
	extern int yylex();
	extern int yyparse();
	extern FILE *yyin;
 
	void yyerror(const char *s);
%}

%union {
	int ival;
	float fval;
	char *sval;
}

%token SNAZZLE TYPE END

%token <ival> INT
%token <fval> FLOAT
%token <sval> STRING

%%

// the first rule defined is the highest-level rule, which in our
// case is just the concept of a whole "snazzle file":
snazzle:
  header template body_section footer {
      std::cout << "done with a snazzle file!" << '\n';
    }
  ;
header:
  SNAZZLE FLOAT {
      std::cout << "reading a snazzle file version " << $2 << '\n';
    }
  ;
template:
  typelines
  ;
typelines:
  typelines typeline
  | typeline
  ;
typeline:
  TYPE STRING {
      std::cout << "new defined snazzle type: " << $2 << '\n';
      free($2);
    }
  ;
body_section:
  body_lines
  ;
body_lines:
  body_lines body_line
  | body_line
  ;
body_line:
  INT INT INT INT STRING {
      std::cout << "new snazzle: " << $1 << $2 << $3 << $4 << $5 << '\n';
      free($5);
    }
  ;
footer:
  END
  ;

%%

void yyerror(const char *s) {
  std::cout << "EEK, parse error!  Message: " << s << '\n';
  // might as well halt now:
  exit(-1);
}